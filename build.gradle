plugins {
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
}

allprojects {
    version = '1.0.7'
    repositories {
        mavenCentral()
    }
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: "com.gorylenko.gradle-git-properties"
}

subprojects {
    gitProperties {
        extProperty = 'gitProps'
        failOnNoGitDirectory = false

        dateFormat = "yyyy-MM-dd'T'HH:mmZ"
        dateFormatTimeZone = "UTC"

        gitPropertiesName = "${name}-git.info"
        keys = ['git.branch',
                'git.build.version',
                'git.closest.tag.commit.count',
                'git.closest.tag.name',
                'git.commit.id',
                'git.commit.id.abbrev',
                'git.commit.id.describe',
                'git.commit.time',
                'git.dirty',
                //'git.remote.origin.url',
                'git.tags',
        ]
    }
    generateGitProperties.outputs.upToDateWhen { false }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'pt.lsts.imc4j'
                from components.java
            }
        }
    }
}

gitProperties {
    extProperty = 'gitProps'
    failOnNoGitDirectory = false

    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"

    gitPropertiesName = "git.info"
    keys = ['git.branch',
            'git.build.version',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.id.describe',
            'git.commit.time',
            'git.dirty',
            //'git.remote.origin.url',
            'git.tags',
    ]
}
generateGitProperties.outputs.upToDateWhen { false }

clean {
    delete fileTree(dir: 'dist' , include: '**/*.jar')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
}

def createLauncher(proj, String launcherName, String destFolder, String jarName, String classBackseat,
                      boolean synckClock, boolean runAsHttpServer, String classHttpServer, String httpPort,
                      boolean httpConfigHotReload) {
    configure(proj) {
        proj.tasks.create("launcher${launcherName.capitalize().replaceAll('[-_]+(\\w?)', '$1')}", Copy) {
            description = "Generate $name launcher"
            group = 'Distribution'
            def workTmpDirectory = "${rootDir}/${destFolder}"

            outputs.upToDateWhen { false }

            from("${rootProject.projectDir}/stubs") {
                include 'launcher.stub'
                rename ".*", "${launcherName.uncapitalize()}.sh"

                filter { it.replaceAll("@JARNAME@", "${jarName}") }
                filter { it.replaceAll("@CLASS_BACKSEAT@", "${classBackseat}") }
                filter { it.replaceAll("@SYNC_CLOCK@", synckClock ? "" : "#") }
                filter { it.replaceAll("@RUN_AS_HTTP_SERVER@", runAsHttpServer ? "" : "#") }
                filter { it.replaceAll("@CLASS_SERVER@", "${classHttpServer}") }
                filter { it.replaceAll("@HTTP_PORT@", "${httpPort}") }
                filter { it.replaceAll("@HOT_CONFIG@", httpConfigHotReload ? "" : "#") }
            }
            into workTmpDirectory
        }
    }
}